{"version":3,"sources":["HOC/withAuthRedirect.tsx","components/Profile/Profileinfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/Profileinfo/ProfileStatusWithHooks.jsx","components/Profile/Profileinfo/ProfileBlockForm.tsx","Redux/profile-selector.ts","components/Profile/Profileinfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","props","to","restProps","module","exports","Post","className","classes","item","src","message","likesCount","maxLength10","maxLengthCreator","AddPostReduxForm","reduxForm","form","myPosts","onSubmit","handleSubmit","Field","placeholder","name","component","Textarea","validate","required","MyPosts","posts","useSelector","profilesPage","profile","dispatch","newPostText","useDispatch","postsElements","map","postsBlock","values","actions","addPostActionCreator","Posts","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","formStatus","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","value","ProfileBlockFormReduxForm","error","formSummaryError","Input","type","Object","keys","contacts","key","contact","getProfile","getStatus","ProfileBlock","formEdit","isOwner","onClick","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","Preloader","descriptionBlock","photos","large","userPhoto","mainPhoto","target","files","length","savePhoto","formData","saveProfile","then","initialValues","ProfileContent","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","refreshProfile","prevProps","prevState","Profile","React","Component","compose","withRouter"],"mappings":"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","file":"static/js/3.d12dc6ad.chunk.js","sourcesContent":["import React from \"react\"\nimport { Redirect } from \"react-router-dom\"\nimport {connect, MapDispatchToProps} from \"react-redux\"\nimport { AppStateType } from \"../Redux/redux-store\"\n\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({ \n    isAuth: state.auth.isAuth\n  })\n\ntype MapPropsType = {\n  isAuth: boolean\n}\n\ntype DispatchPropsType = {\n  \n}\n\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>){\n    const RedirectComponent: React.FC<DispatchPropsType & MapPropsType> = (props) => {\n        if (!props.isAuth) return <Redirect to=\"/login\" />\n        \n        let {isAuth, ...restProps} = props\n        return <WrappedComponent {...restProps as WCP} />\n}\n  \n  let ConnectedAuthRedirectComponent = connect<MapPropsType, {}, WCP, AppStateType>(mapStateToPropsForRedirect) (RedirectComponent)\n\nreturn ConnectedAuthRedirectComponent;\n\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__BVc_8\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1kLok\",\"contact\":\"ProfileInfo_contact__1zLuQ\",\"formEdit\":\"ProfileInfo_formEdit__21GhX\",\"form\":\"ProfileInfo_form__3dV5A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2ifKf\",\"Posts\":\"MyPosts_Posts__3CeaZ\",\"myPosts\":\"MyPosts_myPosts__14O2X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\"};","import React from \"react\";\nimport classes from \"./Post.module.css\";\nimport userPhoto from \"../../../../assets/images/user.png\"\n\nconst Post = (props) => {\n    return (\n            <div className={classes.item}>\n                <img src=\"http://static.mk.ru/upload/entities/2019/05/08/00/articles/detailPicture/c7/b5/08/6e/5dda626cb409b1fa6942c29040609e17.jpg\" />\n              { props.message }\n              <div>\n                 <span>like</span> {props.likesCount}\n              </div>\n            </div>\n    )\n}\n\nexport default Post","import React from \"react\";\nimport classes from \"./MyPosts.module.css\";\nimport Post from \"./Post/Post\";\nimport { Field, reduxForm } from \"redux-form\";\nimport {required, maxLengthCreator} from \"../../../utils/validators/validators\"\nimport {Textarea} from \"../../common/FormsControls/FormsControls\"\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {actions} from \"../../../Redux/profile-reducer\"\n\n\nconst maxLength10 = maxLengthCreator(10)\n\n/*class MyPosts extends Component {\n\nrender() {\n  let addNewPost = (values) => {\n    this.props.addPost(values.newPostText)\n  }\n  \n  let newPostElements = React.createRef();\n  \n  let postsElements = this.props.posts\n  .map( posts => <Post message={posts.message} likesCount={posts.likesCount} profile={this.props.profile} />)\n\n  return (\n    <div className={classes.postsBlock}>\n      <h3>My posts</h3>\n\n      <AddPostReduxForm onSubmit={addNewPost} />\n\n      <div className={classes.Posts}>\n        { postsElements }\n      </div>\n    </div>\n\n  )\n}\n}*/\n\nconst MyForm = (props) => {\n  return ( \n  <form className={classes.myPosts} onSubmit={props.handleSubmit}>\n    <div>\n         <Field placeholder=\"Enter your message\" name=\"newPostText\" component={Textarea} validate={[required, maxLength10]}/>\n    </div>\n    <div>\n         <button>Add post</button>\n    </div>\n  </form>\n  )\n}\n\nconst AddPostReduxForm = reduxForm({\n  form: \"addPostForm\"\n})(MyForm)\n\n\nexport const MyPosts = () => {\n\n     const posts = useSelector(state => state.profilesPage.posts)\n     const profile = useSelector(state => state.profilesPage.profile)\n     const newPostText = useSelector(state => state.profilesPage.newPostText)\n     const dispatch = useDispatch()\n  \n    let addNewPost = (values) => {\n      dispatch(actions.addPostActionCreator(values.newPostText))\n    }\n    \n    //let newPostElements = React.createRef();\n    \n    let postsElements = posts\n    .map( posts => <Post message={posts.message} likesCount={posts.likesCount} profile={profile} />)\n  \n    return (\n      <div className={classes.postsBlock}>\n        <h3>My posts</h3>\n  \n        <AddPostReduxForm onSubmit={addNewPost} />\n  \n        <div className={classes.Posts}>\n          { postsElements }\n        </div>\n      </div>\n  \n    )\n  }\n\n\nexport default MyPosts","import React, {useState, useEffect} from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport classes from \"./ProfileInfo.module.css\"\n\nconst ProfileStatusWithHooks = (props) => {\n\n    let [editMode, setEditMode] = useState(false);\n    let [status, setStatus] = useState(props.status);\n\n    const dispatch = useDispatch()\n     \n\n    useEffect(() => {\n        setStatus(props.status);\n    }, [props.status])\n\n    const activateEditMode = () => {\n        setEditMode(true);\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n\n    const onStatusChange = (e) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    return (\n   <div className={classes.formStatus}>\n       { !editMode && \n        <div>\n           <b>Status:</b> <span onDoubleClick={activateEditMode}>{props.status || \"-----\"}</span>\n        </div>\n    }\n        {editMode &&\n           <div>\n             <input autoFocus={true} onBlur={deactivateEditMode} onChange={onStatusChange} value={status}/>\n           </div>\n    }\n   </div>\n\n    )\n    }\nexport default ProfileStatusWithHooks","import React from \"react\"\nimport { Field, InjectedFormProps } from \"redux-form\"\nimport {Input, Textarea} from \"../../common/FormsControls/FormsControls\"\nimport {reduxForm} from \"redux-form\"\nimport classes from \"./ProfileInfo.module.css\"\nimport { ProfileType } from \"../../../types/types\"\n\ntype PropsType = {\n    profile: ProfileType\n    goToEditMode: () => void \n}\n\nconst ProfileBlockForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = (props, error) => {\n    return <form className={classes.form} onSubmit={props.handleSubmit}> \n                  {<div><button>Save</button></div> }\n                  { props.error && <div className={classes.formSummaryError}>\n                        {props.error}\n                 </div> }\n                   <div>\n                     <b>Full name</b>: <Field placeholder={\"Full name\"} name={\"fullName\"} component={Input}/>\n                  </div>\n                  <div>\n                     <b>Looking for a job</b>: <Field name={\"lookingForAJob\"} component={Input} type={\"checkbox\"}/>\n                  </div>\n                  \n                  <div>\n                     <b>My professional skills</b>: <Field placeholder={\"My professional skills\"} name={\"lookingForAJobDescription\"} component={Textarea}/>\n                  </div>\n                   \n                  <div>\n                     <b>About me</b>:  <Field placeholder={\"About me\"} name={\"aboutMe\"} component={Textarea}/>\n                  </div>\n                   <div>\n                     <b>Contacts</b>: {Object.keys(props.profile.contacts).map(key => {\n                        return <div key={key} className={classes.contact}>\n                            <b>{key}: <Field placeholder={key} name={\"contacts.\" + key} component={Input}/></b>\n                        </div>\n                     })}\n                  </div>\n               </form>\n }\nconst ProfileBlockFormReduxForm = reduxForm<ProfileType, PropsType>({form: \"edit-profile\"})(ProfileBlockForm);\n\n export default ProfileBlockFormReduxForm","import { AppStateType } from './redux-store';\n\n\nexport const getProfile = (state: AppStateType) => {\n    return state.profilesPage.profile\n}\n\nexport const getStatus = (state: AppStateType) => {\n    return state.profilesPage.status\n}","import React, {ChangeEvent, useState} from \"react\";\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport classes from \"./ProfileInfo.module.css\"\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\nimport userPhoto from \"../../../assets/images/user.png\";\nimport ProfileBlockFormReduxForm from \"./ProfileBlockForm\"\nimport { ProfileType } from \"../../../types/types\";\nimport {ContactsType} from \"../../../types/types\"\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getProfile, getStatus } from \"../../../Redux/profile-selector\";\n\ntype PropsType = {\n   // profile: ProfileType\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean \n    savePhoto: (file: File) => void \n    saveProfile: (profile: ProfileType) => Promise<any>\n}\n\nconst ProfileInfo: React.FC<PropsType> = (props) => {\n    let [editMode, setEditMode] = useState(false);\n    const profile = useSelector(getProfile)\n    const status = useSelector(getStatus)\n\n    const dispatch = useDispatch()\n    \n\n\n   if (!profile) {\n        return <Preloader />\n    } \n\n    const onMainPhotosSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files.length) {\n            props.savePhoto(e.target.files[0]);\n        }\n    }\n    const onSubmit = (formData: ProfileType) => {\n        props.saveProfile(formData).then(() => {\n            setEditMode(false);\n        })\n        \n    }\n    return (\n        <div>\n            <div className={classes.descriptionBlock}>\n               <img src={profile.photos.large || userPhoto} className={classes.mainPhoto}/>\n               { props.isOwner && <input type={\"file\"} onChange={onMainPhotosSelected}/>}\n                { editMode ? <ProfileBlockFormReduxForm /*goToEditMode={props.goToEditMode*/\n                                                        goToEditMode={() => {setEditMode(false)}}\n                                                        profile={profile}\n                                                        onSubmit={onSubmit}\n                                                        initialValues={profile} /> \n                           : <ProfileBlock profile={profile} \n                                           isOwner={props.isOwner} \n                                           goToEditMode={() => {setEditMode(true)}}/> }\n                \n                <ProfileStatusWithHooks status={status}\n                                        updateStatus={props.updateStatus}/>\n            </div>\n        </div>\n\n    )\n}\ntype ProfileDataPropsType = {\n    profile: ProfileType \n    isOwner: boolean\n    goToEditMode: () => void\n }\nconst ProfileBlock: React.FC<ProfileDataPropsType> = (props) => {\n    return <div className={classes.formEdit}> \n                  { props.isOwner && <div><button onClick={props.goToEditMode}>Edit</button></div> }\n                   <div>\n                     <b>Full name</b>: {props.profile.fullName}\n                  </div>\n                  <div>\n                     <b>Looking for a job</b>: {props.profile.lookingForAJob ? \"yes\" : \"no\"}\n                  </div>\n                  { props.profile.lookingForAJob &&\n                  <div>\n                     <b>My professional skills</b>: {props.profile.lookingForAJobDescription}\n                  </div>\n                   }\n                  <div>\n                     <b>About me</b>: {props.profile.aboutMe}\n                  </div>\n                  <div>\n                     <b>Contacts</b>: {Object.keys(props.profile.contacts).map((key) => {\n                        return <Contact key={key} contactTitle={key} contactValue={props.profile.contacts[key as keyof ContactsType]}/>\n                     })}\n                  </div>\n               </div>\n}\n\n\ntype ContactsPropsType = {\n    contactTitle: string\n    contactValue: string \n}\n\nconst Contact: React.FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\n    return <div className={classes.contact}><b>{contactTitle}</b> : {contactValue}</div>\n}\nexport default ProfileInfo","import React from \"react\";\nimport { ProfileType } from \"../../types/types\";\nimport {MyPosts} from \"./MyPosts/MyPosts\"\nimport ProfileInfo from \"./Profileinfo/ProfileInfo\";\n\n\ntype PropsType = {\n  //profile: ProfileType\n  status: string \n  updateStatus: (status: string) => void\n  isOwner: boolean\n  savePhoto: (file: File) => void\n  saveProfile: (profile: ProfileType) => Promise<any>\n}\nconst ProfileContent: React.FC<PropsType> = (props) => {\n  return (\n    <div>\n      <ProfileInfo  \n                   status={props.status}\n                   updateStatus={props.updateStatus}\n                   isOwner={props.isOwner}\n                   savePhoto={props.savePhoto}\n                   saveProfile={props.saveProfile}/>\n      <MyPosts /> \n    </div>\n    \n  )\n}\n\nexport default ProfileContent","import React from \"react\";\nimport Profile from \"./Profile\"\nimport {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile} from \"../../Redux/profile-reducer\"\nimport { connect } from \"react-redux\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport {compose} from \"redux\"\nimport { withAuthRedirect } from \"../../HOC/withAuthRedirect\";\nimport { AppStateType } from \"../../Redux/redux-store\";\nimport { ProfileType } from \"../../types/types\";\nimport ProfileContent from \"./Profile\";\n\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\n\ntype DispatchPropsType = {\n  getUserProfile: (userId: number) => void \n  getStatus: (userId: number) => void\n  updateStatus: (status: string) => void\n  savePhoto: (file: File) => void\n  saveProfile: (profile: ProfileType) => Promise<any>\n}\n\ntype PathParamsType = {\n  userId: string \n}\n\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>\n\nclass ProfileContainer extends React.Component<PropsType> {\n  constructor(props: PropsType) {\n    super (props)\n  }\n  refreshProfile(){\n    let userId: number | null = +this.props.match.params.userId;\n    if (!userId) {\n      userId = this.props.authorizedUserId;\n      if (!userId) {\n        this.props.history.push(\"/login\");\n      }\n    }\n  \n    this.props.getUserProfile(userId as number)\n  \n    this.props.getStatus(userId as number);\n  }\n    componentDidMount() {\n      this.refreshProfile();\n    }\n\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType){\n      if (this.props.match.params.userId != prevProps.match.params.userId){      \n        this.refreshProfile();\n    }\n  }\n\n  render() {\n   \n  return (\n    <div>\n      <ProfileContent {...this.props} \n               \n               isOwner={!this.props.match.params.userId}             \n               status={this.props.status}\n               updateStatus={this.props.updateStatus}\n               savePhoto={this.props.savePhoto}\n               saveProfile={this.props.saveProfile}/>\n    </div>\n    \n  )\n   }\n}\n\n\nlet mapStateToProps = (state: AppStateType) => ({ \n    profile: state.profilesPage.profile,\n    status: state.profilesPage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth\n    \n})\n\n\n export default compose<React.ComponentType>(\n  connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\n  withRouter,\n  withAuthRedirect\n)(ProfileContainer)\n"],"sourceRoot":""}