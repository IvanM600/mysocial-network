{"version":3,"sources":["components/Dialogs/Dialogs.module.css","HOC/withAuthRedirect.tsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogitem/Dialogitem.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","props","to","restProps","Message","className","classes","message","mes","DialogItem","path","id","dialog","active","name","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","dialogsForm","Field","component","Textarea","validate","required","placeholder","dialogButton","Dialogs","dialogsElements","dialogsData","map","messagesElements","messagesData","dialogs","dialogsItems","messages","values","sendMessage","newMessageText","compose","dialogPage","actions","addMessageActionCreator"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,aAAe,8BAA8B,SAAW,0BAA0B,QAAU,yBAAyB,YAAc,+B,qHCIjOC,EAA6B,SAACC,GAAD,MAA0B,CACvDC,OAAQD,EAAME,KAAKD,SAWhB,SAASE,EAAsBC,GAUtC,OAFuCC,YAA6CN,EAA7CM,EAPmC,SAACC,GACnE,IAAKA,EAAML,OAAQ,OAAO,cAAC,IAAD,CAAUM,GAAG,WAEVD,EAAxBL,OAHwE,IAG7DO,EAH6D,YAGhDF,EAHgD,YAI7E,OAAO,cAACF,EAAD,eAAsBI,S,qFCbtBC,EANC,SAACH,GACb,OACI,qBAAKI,UAAWC,IAAQC,QAAxB,SAAkCN,EAAMO,O,QCQjCC,EATI,SAACR,GAChB,IAAIS,EAAO,YAAcT,EAAMU,GAC/B,OACI,qBAAKN,UAAWC,IAAQM,OAAS,IAAMN,IAAQO,OAA/C,SACI,cAAC,IAAD,CAASX,GAAIQ,EAAb,SAAoBT,EAAMa,U,kCCEhCC,EAAcC,YAAiB,IAkD/BC,EAAsBC,YAAU,CAClCC,KAAM,wBADkBD,EAjBL,SAACjB,GACxB,OACO,uBAAMmB,SAAUnB,EAAMoB,aAAtB,UACS,qBAAKhB,UAAWC,IAAQgB,YAAxB,SACA,cAACC,EAAA,EAAD,CAAOC,UAAWC,IACXC,SAAU,CAACC,IAAUZ,GACrBD,KAAK,iBACLc,YAAY,yBAGnB,qBAAKvB,UAAWC,IAAQuB,aAAxB,SACI,kDAULC,EAnDC,SAAC7B,GAGb,IAEI8B,EAAkB9B,EAAM+B,YAC3BC,KAAK,SAAArB,GAAM,OAAI,cAAC,EAAD,CAAYE,KAAMF,EAAOE,KAAsBH,GAAIC,EAAOD,IAAtBC,EAAOD,OAEvDuB,EAAmBjC,EAAMkC,aAC5BF,KAAK,SAAA1B,GAAO,OAAI,cAAC,EAAD,CAASC,IAAKD,EAAQC,KAAUD,EAAQI,OAQzD,OACI,sBAAKN,UAAWC,IAAQ8B,QAAxB,UACI,qBAAK/B,UAAWC,IAAQ+B,aAAxB,SACKN,IAEL,sBAAK1B,UAAWC,IAAQgC,SAAxB,UACI,8BAAOJ,IACP,cAACjB,EAAD,CAAqBG,SAbb,SAACmB,GACjBtC,EAAMuC,YAAYD,EAAOE,0B,yBCRlBC,sBACX1C,aAVkB,SAACL,GACpB,MAAO,CACJqC,YAAarC,EAAMgD,WAAWX,YAC9BG,aAAcxC,EAAMgD,WAAWR,aAC/BM,eAAgB9C,EAAMgD,WAAWF,kBAMV,CACtBD,YAAaI,IAAQC,0BAExB/C,IAJW4C,CAKbZ","file":"static/js/4.5bbeb174.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"dialogButton\":\"Dialogs_dialogButton__1Lift\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\",\"dialogsForm\":\"Dialogs_dialogsForm__34z_V\"};","import React from \"react\"\nimport { Redirect } from \"react-router-dom\"\nimport {connect, MapDispatchToProps} from \"react-redux\"\nimport { AppStateType } from \"../Redux/redux-store\"\n\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({ \n    isAuth: state.auth.isAuth\n  })\n\ntype MapPropsType = {\n  isAuth: boolean\n}\n\ntype DispatchPropsType = {\n  \n}\n\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>){\n    const RedirectComponent: React.FC<DispatchPropsType & MapPropsType> = (props) => {\n        if (!props.isAuth) return <Redirect to=\"/login\" />\n        \n        let {isAuth, ...restProps} = props\n        return <WrappedComponent {...restProps as WCP} />\n}\n  \n  let ConnectedAuthRedirectComponent = connect<MapPropsType, {}, WCP, AppStateType>(mapStateToPropsForRedirect) (RedirectComponent)\n\nreturn ConnectedAuthRedirectComponent;\n\n}","import React from \"react\";\nimport classes from \"./../Dialogs.module.css\"\n\nconst Message = (props) => {\n    return (\n        <div className={classes.message}>{props.mes}</div>\n    )\n}\n\nexport default Message;","import React from \"react\";\nimport {NavLink} from \"react-router-dom\"\nimport classes from \"./../Dialogs.module.css\"\n\nconst DialogItem = (props) => {\n    let path = \"/dialogs/\" + props.id\n    return (\n        <div className={classes.dialog + ' ' + classes.active}>\n            <NavLink to={path}>{props.name}</NavLink>\n        </div>\n    )\n}\n\nexport default DialogItem; ","import React from \"react\";\nimport classes from \"./Dialogs.module.css\"\nimport Message from \"./Message/Message\"\nimport DialogItem from \"./Dialogitem/Dialogitem\"\nimport { Redirect } from \"react-router-dom\"\nimport { Field, reduxForm } from \"redux-form\";\nimport {Textarea} from \"../common/FormsControls/FormsControls\"\nimport { maxLengthCreator, required } from \"../../utils/validators/validators\";\n\n \nconst maxLength50 = maxLengthCreator(50)\n\n\nconst Dialogs = (props) => {\n\n\n    let newMessageElements = React.createRef();\n\n    let dialogsElements = props.dialogsData\n    .map( dialog => <DialogItem name={dialog.name} key={dialog.id} id={dialog.id} /> );\n    \n    let messagesElements = props.messagesData\n    .map( message => <Message mes={message.mes} key={message.id}/> );\n\n    let addNewMessage = (values) => {\n        props.sendMessage(values.newMessageText);\n    }\n    \n //if (!props.isAuth) return <Redirect to={\"/login\"} />\n    \n    return (\n        <div className={classes.dialogs}>\n            <div className={classes.dialogsItems}>\n               { dialogsElements }\n            </div>\n            <div className={classes.messages}>\n                <div>{ messagesElements }</div>\n                <AddMessageFormRedux onSubmit={addNewMessage} />\n            </div>\n        </div>\n    )\n}\n\nconst AddMessageForm = (props) => {\nreturn (\n       <form onSubmit={props.handleSubmit}> \n                <div className={classes.dialogsForm}>\n                <Field component={Textarea} \n                       validate={[required, maxLength50]}\n                       name=\"newMessageText\"\n                       placeholder=\"Enter your message\"\n                       />\n               </div>\n                <div className={classes.dialogButton}>\n                    <button>Send</button>\n                </div>\n       </form>\n)\n}\n\nconst AddMessageFormRedux = reduxForm({\n    form: \"dialogAddMessageForm\"\n})(AddMessageForm)\n\nexport default Dialogs;","import React from \"react\";\nimport { actions } from \"../../Redux/dialog-reducer\"\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\"\nimport { withAuthRedirect } from \"../../HOC/withAuthRedirect\";\nimport {compose} from \"redux\"\nimport { AppStateType } from \"../../Redux/redux-store\";\n\nlet mapStateToProps = (state: AppStateType) => {\n   return {\n      dialogsData: state.dialogPage.dialogsData,\n      messagesData: state.dialogPage.messagesData,\n      newMessageText: state.dialogPage.newMessageText,\n   }\n}\n\n\nexport default compose(\n    connect(mapStateToProps, {\n       sendMessage: actions.addMessageActionCreator\n    }),\n    withAuthRedirect\n)(Dialogs) as React.ComponentType"],"sourceRoot":""}