{"version":3,"sources":["assets/images/preloader.svg","components/common/Preloader/Preloader.js","components/Users/Paginator.module.css","components/Users/users.module.css","assets/images/user.png","api/profile-api.ts","Redux/profile-reducer.ts","Redux/dialog-reducer.ts","api/api.ts","api/auth-api.ts","api/security-api.ts","Redux/auth-reducer.ts","components/Login/Login.tsx","Redux/app-reducer.ts","api/users-api.ts","utils/object-helpers.ts","Redux/users-reducer.ts","Redux/redux-store.ts","HOC/withSuspense.tsx","Redux/users-selectors.ts","components/Users/Paginator.tsx","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","Redux/auth-selector.ts","components/Header/Header.jsx","App.tsx","index.js","components/common/FormsControls/FormsControls.module.css","utils/validators/validators.ts","components/common/FormsControls/FormsControls.js"],"names":["Preloader","props","src","preloader","module","exports","profileAPI","userId","instance","get","then","res","data","status","put","photoFile","formData","FormData","append","headers","profile","initialState","posts","id","message","likesCount","newPostText","actions","addPostActionCreator","type","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","photos","getUserProfile","dispatch","a","getStatus","updateStatus","resultCode","savePhoto","file","saveProfile","getState","auth","Error","stopSubmit","_error","Promise","reject","profileReducer","state","action","newPost","filter","p","messagesData","mes","dialogsData","name","newMessageText","addMessageActionCreator","deleteMessage","dialogReducer","newMess","m","ResultCodesEnum","ResultCodesForCaptcha","axios","create","withCredentials","baseURL","authAPI","email","password","rememberMe","captcha","post","delete","securityAPI","login","isAuth","captchaUrl","payload","getAuthUserData","meData","Success","getCaptchaUrl","url","authReducer","maxLength25","maxLengthCreator","LoginReduxForm","reduxForm","form","className","classes","onSubmit","handleSubmit","Field","form_input","placeholder","component","Input","validate","required","form_checkbox","error","formSummaryError","form_button","Login","useSelector","useDispatch","to","CaptchaIsRequired","messages","length","initialized","appReducer","usersAPI","getUsers","currentPage","pageSize","term","friend","response","getUsers2","pageNumber","follow","unfollow","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","users","totalUsersCount","isFetching","followingInProgress","count","requestUsers","page","totalCount","usersReducer","followed","rootReducer","combineReducers","profilesPage","dialogPage","usersPage","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","_store_","withSuspense","WrappedComponent","Suspense","fallback","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getUsersFilter","Paginator","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","onClick","cn","selectedPage","e","usersSearchFormValidate","values","UsersSearchForm","React","memo","enableReinitialize","initialValues","String","setSubmitting","onFilterChanged","isSubmitting","as","value","disabled","Users","history","useHistory","useEffect","parsed","queryString","location","search","substr","actualPage","actualFilter","Number","pathname","usersItems","small","userPhoto","some","UsersPage","pageTitle","selectIsAuth","selectCurrentUserLogin","AppHeader","Header","Layout","span","theme","mode","defaultSelectedKeys","Item","alt","style","backgroundColor","icon","UserOutlined","SubMenu","Menu","Content","Footer","Sider","DialogsContainer","lazy","ProfileContainer","SuspendedDialogs","SuspendedProfile","App","catchAllUnhandleErrors","alert","console","PromiseRejectionEvent","this","initializeApp","addEventListener","padding","margin","width","height","title","LaptopOutlined","NotificationOutlined","minHeight","exact","from","path","render","textAlign","Component","AppContainer","withRouter","connect","MainApp","StrictMode","ReactDOM","document","getElementById","maxLength","FormControl","input","meta","child","element","hasError","touched","formControl","children","Textarea","restProps"],"mappings":"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","file":"static/js/main.50e8f9f3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/preloader.e1dbdd54.svg\";","import React from \"react\"\nimport preloader from \"../../../assets/images/preloader.svg\"\n\nlet Preloader = (props) => {\n    return <img src={preloader}/>\n}\n\nexport default Preloader","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__3aoIo\",\"paginator\":\"Paginator_paginator__1uFzw\",\"pageNumber\":\"Paginator_pageNumber__2AXNx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__1_En6\",\"selectedPage\":\"users_selectedPage__1mnwI\",\"usersItems\":\"users_usersItems__3oxvb\"};","export default __webpack_public_path__ + \"static/media/user.a2446033.png\";","import { PhotosType, ProfileType } from '../types/types';\nimport { instance, LoginMeResponseType, ResponseType } from './api';\n\ntype SavePhotoResponseDataType = {\n    photos: PhotosType\n}\n\nexport const profileAPI = {\n    getProfile(userId: number) {\n       return instance.get<ProfileType>(`profile/` + userId).then(res => res.data);\n          \n    },\n    getStatus(userId: number) {\n       return instance.get<string>(`profile/status/` + userId).then(res => res.data);\n    },\n    updateStatus(status: string) {\n       return instance.put<ResponseType>(`profile/status`, {status: status}).then(res => res.data);\n    },\n    savePhoto(photoFile: any){\n       const formData = new FormData();\n       formData.append(\"image\", photoFile);\n       return instance.put<ResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\n          headers: {\n             \"Content-Type\": \"multipart/form-data\"\n          }\n       }).then(res => res.data);\n    },\n    saveProfile(profile: ProfileType){\n       return instance.put<ResponseType>(`profile`, profile).then(res => res.data);\n    }\n \n }","import { FormAction } from 'redux-form/lib/actions';\nimport { InferActionsTypes, BaseThunkType } from './redux-store';\nimport { PhotosType, ProfileType } from './../types/types';\nimport { stopSubmit } from \"redux-form\";\nimport {profileAPI} from \"../api/profile-api\"\n\ntype PostType = {\n    id: number\n    message: string \n    likesCount: number\n}\n\nlet initialState = {\n    posts: [\n        {id: 0, message: \"Hi, how are you?\", likesCount: 40},\n        {id: 1, message: \"Its my first post\", likesCount: 35},\n      ] as Array<PostType>, \n      profile: null as ProfileType | null,\n      status: \"\",\n      newPostText: \"\" \n}\n\nexport type InitialStateType = typeof initialState\ntype ActionsType = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsType> | FormAction\n\nconst profileReducer = (state=initialState, action: ActionsType): InitialStateType  => {\n    switch (action.type) {\n        case \"SN/ADD-POST\": {\n\n            let newPost = action.newPostText;\n            return {\n                ...state,\n                posts: [...state.posts, {id: 5, message: newPost, likesCount: 0}],\n            }\n        }\n\n        case \"SN/SET_USER_PROFILE\": {\n            return {\n                ...state, profile: action.profile\n            }\n        }\n        case \"SN/SET_STATUS\": {\n            return {\n               ...state, status: action.status\n            }\n        }\n        case \"SN/DELETE_POST\": {\n            return {\n               ...state, posts: state.posts.filter(p => p.id != action.postId)\n            }\n        }\n        case \"SN/SAVE_PHOTO_SUCCESS\": {\n            return {\n               ...state, profile: {...state.profile, photos: action.photos} as ProfileType\n            }\n        }\n            default:\n                return state;\n        \n    }\n   \n}\n\nexport const actions = {\n    addPostActionCreator: (newPostText: string) => ({type: \"SN/ADD-POST\", newPostText} as const),\n    setUserProfile: (profile: ProfileType ) => ({type: \"SN/SET_USER_PROFILE\", profile} as const),\n    setStatus: (status: string) => ({type: \"SN/SET_STATUS\", status} as const),\n    deletePost: (postId: number) => ({type: \"SN/DELETE_POST\", postId} as const),\n    savePhotoSuccess: (photos: PhotosType) => ({type: \"SN/SAVE_PHOTO_SUCCESS\", photos} as const)\n\n}\n\n  export const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\n   let data = await profileAPI.getProfile(userId);\n        dispatch(actions.setUserProfile(data));\n  }\n  export const getStatus = (userId: number): ThunkType => async (dispatch) => {\n   let data = await profileAPI.getStatus(userId);\n        dispatch(actions.setStatus(data));\n  }\n\n  export const updateStatus = (status: string): ThunkType => async (dispatch) => {\n  try {\n    let data = await profileAPI.updateStatus(status);\n        if (data.resultCode === 0) {\n        dispatch(actions.setStatus(status));\n        }\n    } catch (error) {\n        \n    }\n  }\n\n  export const savePhoto = (file: File): ThunkType => async (dispatch) => {\n    let data = await profileAPI.savePhoto(file);\n          if (data.resultCode === 0) {\n          dispatch(actions.savePhotoSuccess(data.data.photos));\n          }\n    }\n\n    export const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\n        const userId = getState().auth.userId;\n        const data = await profileAPI.saveProfile(profile);\n              if (data.resultCode === 0) {\n                  if (userId != null) {\n                      // @ts-ignore\n              dispatch(getUserProfile(userId));\n                  } else {\n                      throw new Error(\"userId cant be null\")\n                  }\n              } else {\n                  // @ts-ignore\n                  dispatch(stopSubmit(\"edit-profile\", {_error: data.message[0]}));\n                  return Promise.reject(data.message[0])\n              }\n        }\n\nexport default profileReducer;","import { InferActionsTypes } from './redux-store';\n\n\ntype DialogType = {\n  id: number\n  name: string\n}\ntype MessageType = {\n  id: number\n  mes: string\n}\n\nlet initialState = {\n    messagesData: [\n        { id: 1, mes: \"hi\" },\n        { id: 2, mes: \"How are you?\" },\n        { id: 3, mes: \"Yo\" },\n      ] as Array<MessageType>,\n      dialogsData: [\n        { id: 1, name: \"Ivan\" },\n        { id: 2, name: \"Sasha\" },\n        { id: 3, name: \"Lena\" },\n        { id: 4, name: \"Vika\" },\n        { id: 5, name: \"Nikita\" },\n        { id: 6, name: \"Ira\" }\n      ] as Array<DialogType>,\n      newMessageText: \"\"\n\n}\n\n\nexport type InitialStateType = typeof initialState\ntype ActionsType = InferActionsTypes<typeof actions>\n\nconst dialogReducer = (state=initialState, action: ActionsType): InitialStateType => {\n\n     switch (action.type) {           \n        case \"SN/DIALOGS/ADD-MESSAGE\": \n        let newMess = action.newMessageText\n        return {\n          ...state,\n          messagesData: [ ...state.messagesData, {id: 4, mes: newMess}],\n\n        };\n        case \"SN/DIALOGS/DELETE_MESSAGE\": {\n          return {\n            ...state, messagesData: state.messagesData.filter(m => m.id != action.userId)\n          }\n        }\n        \n        default: return state;\n     }\n    \n    }\n      export const actions = {\n        addMessageActionCreator: (newMessageText: string) => ({type: \"SN/DIALOGS/ADD-MESSAGE\", newMessageText} as const),\n        deleteMessage: (userId: number | null) => ({type: \"SN/DIALOGS/DELETE_MESSAGE\", userId} as const)\n      }\n\n      \n      \n\nexport default dialogReducer","import { UserType } from './../types/types';\nimport axios from \"axios\"\n\n\n export const instance = axios.create({\n        withCredentials: true,\n        baseURL: `https://social-network.samuraijs.com/api/1.0/`,\n        headers: {  \n            \"API-KEY\": \"d59d0a96-dc14-4681-953e-c6b49c967a3e\"\n        }\n     \n });\n\n\nexport enum ResultCodesEnum {\n   Success = 0,\n   Error = 1,\n}\n\nexport enum ResultCodesForCaptcha {\n   CaptchaIsRequired = 10\n}\n\nexport type MeResponseType = {\n   data: { id: number, email: string, login: string}\n   resultCode: ResultCodesEnum\n   messages: Array<string>\n}\n\nexport type LoginMeResponseType = {\n   data: { userId: number }\n   resultCode: ResultCodesEnum | ResultCodesForCaptcha\n   messages: Array<string>\n}\n\n export type GetItemsType = {\n    items: Array<UserType>\n    totalCount: number\n    error: string | null\n }\n\n export type ResponseType<D = {}, RC = ResultCodesEnum> = {\n   data: D\n   message: Array<string>\n   resultCode: RC\n}\n \nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\n   data: D\n   message: Array<string>\n   resultCode: RC\n}\n\n\n \n\n\n","import { instance, LoginMeResponseType, MeResponseType, ResultCodesEnum, ResponseType, ResultCodesForCaptcha } from './api';\n\n\ntype MeResponseDataType = {\n    id: number\n    email: string\n    login: string\n }\n \n type LoginMeResponseDataType = {\n    userId: number \n }\n \n\nexport const authAPI = {\n    me () {\n    return instance.get<ResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data)\n    },\n \n    login (email: string, password: string, rememberMe = false, captcha: null | string = null) {\n       return instance.post<ResponseType<LoginMeResponseDataType, ResultCodesEnum | ResultCodesForCaptcha>>(`auth/login`, {email, password, rememberMe, captcha}).then(res => res.data);\n       },\n       logout () {\n          return instance.delete(`auth/login`)\n          }\n  }","import { getCaptchaUrl } from './../Redux/auth-reducer';\nimport { instance } from './api';\n\ntype getCaptchaUrlResponseType = {\n  url: string\n}\nexport const securityAPI = {\n    getCaptchaUrl() {\n    return instance.get<getCaptchaUrlResponseType>(`security/get-captcha-url`).then(res => res.data)\n    },\n  }\n ","import { BaseThunkType, InferActionsTypes } from './redux-store';\nimport { ResultCodesForCaptcha} from './../api/api';\nimport {ResultCodesEnum} from \"../api/api\"\nimport {authAPI} from \"../api/auth-api\"\nimport {securityAPI} from \"../api/security-api\"\nimport {stopSubmit} from \"redux-form\"\nimport {FormAction} from 'redux-form/lib/actions'\n\n\n/*export type initialStateType2 = {\n    userId: number | null,\n    email: string | null,\n    login: string | null,\n    isAuth: boolean,\n    captchaUrl: string | null\n}*/\n\nlet initialState = {\n    userId: null as number | null,\n    email: null as string | null,\n    login: null as string | null,\n    isAuth: false,\n    captchaUrl: null as string | null\n};\n\nconst authReducer = (state=initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case \"SN/auth/SET_USER_DATA\":\n        case \"SN/auth/GET_CAPTCHA_URL_SUCCESS\":\n           return {\n               ...state, \n               ...action.payload,\n            } \n\n            default:\n                return state;\n        \n    }\n   \n}\n\nexport const actions = {\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\n        type: \"SN/auth/SET_USER_DATA\", payload: {userId, email, login, isAuth}\n    } as const),\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({\n        type: \"SN/auth/GET_CAPTCHA_URL_SUCCESS\", payload: {captchaUrl}\n    }  as const)\n}\n\n\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\n  let meData = await authAPI.me();\n        if (meData.resultCode === ResultCodesEnum.Success) {\n            let {id, login, email} = meData.data;\n            dispatch(actions.setAuthUserData(id, email, login, true));\n        }\n}\n\n\n\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\n  let data = await authAPI.login(email, password, rememberMe, captcha);\n        if (data.resultCode === ResultCodesEnum.Success) {\n            dispatch(getAuthUserData())\n        } else {\n            if (data.resultCode === ResultCodesForCaptcha.CaptchaIsRequired) {\n                dispatch(getCaptchaUrl())\n            }\n            let messages = data.message.length > 0 ? data.message[0] : \"Some error\";\n            dispatch(stopSubmit(\"login\", {_error: messages}))\n        }\n}\n\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\n    const data = await securityAPI.getCaptchaUrl();\n         const captchaUrl = data.url;\n              dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\n          }\n\n\nexport const logout = (): ThunkType => async (dispatch: any) => {\n    let response = await authAPI.logout();\n        if (response.data.resultCode === 0) {\n            dispatch(actions.setAuthUserData(null, null, null, false))\n        }\n}\nexport default authReducer;\n\n\nexport type InitialStateType = typeof initialState\ntype ActionsType = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","import React from \"react\";\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\nimport {required, maxLengthCreator} from \"../../utils/validators/validators\";\nimport {Input} from \"../common/FormsControls/FormsControls\"\nimport {login}  from \"../../Redux/auth-reducer\"\nimport { Redirect } from \"react-router-dom\"\nimport classes from \"./../common/FormsControls/FormsControls.module.css\"\nimport { AppStateType } from \"../../Redux/redux-store\";\nimport {useDispatch, useSelector} from \"react-redux\"\n\nconst maxLength25 = maxLengthCreator(25)\n\ntype LoginFormOwnProps = {\n    captchaUrl: string | null\n}\n\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = (props) => {\n    return  (\n            <form className={classes.form} onSubmit={props.handleSubmit}>\n                <h1>Login</h1>\n                 <div>\n                     <Field className={classes.form_input} placeholder={\"Email\"} name={\"email\"} component={Input} validate={[required, maxLength25]}/>\n                 </div>\n                 <div>\n                     <Field className={classes.form_input} placeholder={\"Password\"} name={\"password\"} component={Input} validate={[required, maxLength25]} type={\"password\"}/>\n                 </div>\n                 <div className={classes.form_checkbox}>\n                     <Field component={Input} validate={[required, maxLength25]} name={\"rememberMe\"} type={\"checkbox\"}/>\n                      remember me\n                 </div>\n\n                 {props.captchaUrl && <img src={props.captchaUrl}/>}\n                 {props.captchaUrl && <Field placeholder={\"Symbols from image\"} name={\"captcha\"} validate={[required, maxLength25]} component={Input}/>}\n                { props.error && <div className={classes.formSummaryError}>\n                        {props.error}\n                 </div> }\n                 <div>\n                     <button className={classes.form_button}>Sign in</button>\n                 </div>\n             </form>\n    )\n}\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({\n    form: \"login\"\n})(LoginForm)\n\n\n\ntype LoginFormValuesType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha: string \n}\n\nexport const Login: React.FC = () => {\n\n    const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl)\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\n    const dispatch = useDispatch()\n\n    const onSubmit = (formData: any) => {\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\n    }\n\n    if (isAuth) {\n        return <Redirect to={\"profile\"} />\n    }\n\n    return <div>\n             <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\n             <div>\n                 <div>Guest account:</div>\n                 <div>Email: free@samuraijs.com</div>\n                 <div>Password: free</div>\n             </div>\n          </div>\n          \n}\n\n","import { InferActionsTypes } from './redux-store';\nimport { getAuthUserData } from \"./auth-reducer\";\n\n\n\nlet initialState = {\n    initialized: false\n};\n\nexport type InitialStateType = typeof initialState\ntype ActionsType = InferActionsTypes<typeof actions>\n\nconst appReducer = (state=initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case \"SN/APP/INITIALIZED_SUCCESS\":\n           return {\n               ...state, \n               initialized: true\n            }\n\n            default:\n                return state;\n        \n    }\n   \n}\n\nexport const actions = {\n    initializedSuccess: () => ({type: \"SN/APP/INITIALIZED_SUCCESS\"})\n}\n\nexport const initializeApp = () => (dispatch: any) => {\n    let promise = dispatch(getAuthUserData());\n    promise.then(() => {\n        dispatch(actions.initializedSuccess)\n    })\n    dispatch(actions.initializedSuccess())\n}\n\nexport default appReducer;","import { AxiosPromise } from 'axios';\nimport { instance, GetItemsType, ResponseType } from './api';\n\n\nexport const usersAPI = {\n    getUsers(currentPage = 1, pageSize = 10, term: string = \"\", friend: null | boolean = null){\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? \"\" : `&friend=${friend}`)) \n             .then (response => response.data);\n     },\n     getUsers2(pageNumber = 1, pageSize = 10) {\n        return instance.get(`follow?page=${pageNumber}&count=${pageSize}`)\n             .then (response => response.data);\n     },\n     follow (userId: number) {\n       return instance.post<ResponseType>(`follow/${userId}`).then(res => res.data)\n     },\n     unfollow (userId: number) {\n        return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<ResponseType>\n    },\n\n }","export const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\n   // @ts-ignore\n    return items.map(u => { \n        if (u[objPropName] === itemId) {\n            return {...u, ...objPropName, ...newObjProps}\n        }\n        return u;\n     })\n}\n\n","import { APIResponseType } from './../api/api';\nimport { UserType } from './../types/types';\nimport {usersAPI} from \"../api/users-api\"\nimport {updateObjectInArray} from \"../utils/object-helpers\"\nimport { InferActionsTypes, BaseThunkType } from './redux-store';\nimport { Dispatch } from 'react';\n\nlet initialState = {\n    users: [] as Array<UserType>,\n    pageSize: 100, \n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: true,\n    followingInProgress: [] as Array<number>, \n    filter: {\n        term: \"\",\n        friend: null as null | boolean\n    }\n};\n\nexport type InitialStateType = typeof initialState \n\ntype DispatchType = Dispatch<ActionsTypes>\ntype ThunkType = BaseThunkType<ActionsTypes>\ntype ActionsTypes = InferActionsTypes<typeof actions>\nexport type FilterType = typeof initialState.filter\n\nconst usersReducer = (state=initialState, action: any): InitialStateType => {\n    switch (action.type) {\n        case \"FOLLOW\":\n           return {\n               ...state, \n               users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\n            }\n        case \"UNFOLLOW\": \n        return {\n            ...state, \n            users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\n         }\n         case \"SET_USERS\": {\n             return { ...state, users: action.users}\n         }\n        case \"SET_CURRENT_PAGE\": {\n            return { ...state, currentPage: action.currentPage}\n        }\n        case \"SET_TOTAL_USERS_COUNT\": {\n            return { ...state, totalUsersCount: action.count}\n        }\n        case \"TOGGLE_IS_FETCHING\": {\n            return{...state, isFetching: action.isFetching}\n        }\n        case \"TOGGLE_IS_FOLLOWING_PROGRESS\": {\n            return{\n                   ...state, \n                   followingInProgress: action.isFetching \n                   ? [...state.followingInProgress, action.userId]\n                   : state.followingInProgress.filter(id => id != action.userId)\n                }\n        }\n        case \"SET_FILTER\": {\n            return {...state, filter: action.payload}\n        }\n            default:\n                return state;\n    }\n   \n}\n\n\nexport const actions = {\n\nfollowSuccess: (userId: number) => ({type: \"FOLLOW\", userId} as const),\n\nunfollowSuccess: (userId: number) => ({type: \"UNFOLLOW\", userId} as const),\n\nsetUsers: (users: Array<UserType>) => ({type: \"SET_USERS\", users} as const),\n\nsetCurrentPage: (currentPage: number) => ({type: \"SET_CURRENT_PAGE\", currentPage} as const),\n\nsetUsersTotalCount: (totalUsersCount: number) => ({type: \"SET_TOTAL_USERS_COUNT\", count: totalUsersCount} as const),\n\ntoggleIsFetching: (isFetching: boolean) => ({ type: \"TOGGLE_IS_FETCHING\", isFetching} as const),\n\ntoggleFollowingProgress: (isFetching: boolean, userId: number) => ({type: \"TOGGLE_IS_FOLLOWING_PROGRESS\", isFetching, userId} as const), \n\nsetFilter: (filter: FilterType) => ({type: \"SET_FILTER\", payload: filter} as const)\n\n}\n\nexport const requestUsers = (page:number, pageSize:number, filter: FilterType): ThunkType => {\n\n     return async (dispatch, getState) => {\n\n        dispatch (actions.toggleIsFetching(true))\n        dispatch (actions.setCurrentPage(page))\n        dispatch(actions.setFilter(filter))\n        let data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend)\n        dispatch(actions.toggleIsFetching(false))\n        dispatch(actions.setUsers(data.items))\n        dispatch(actions.setUsersTotalCount(data.totalCount))\n    }\n}\n\nconst followUnfollowFlow = async (dispatch: Dispatch<ActionsTypes>, \n                                  userId: number,\n                                  apiMethod: (userId: number) => Promise<APIResponseType>,\n                                  actionCreator: (userId: number) => ActionsTypes ) => {\n    dispatch(actions.toggleFollowingProgress(true, userId));\n      let data = await apiMethod(userId)\nif (data.resultCode === 0) {\ndispatch(actionCreator(userId));\n}\ndispatch(actions.toggleFollowingProgress(false, userId));\n}\n\nexport const follow = (userId: number): ThunkType => {\n\n    return async (dispatch) => {\n      await followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess)\n  }\n}\n\nexport const unfollow = (userId: number): ThunkType => {\n    return async (dispatch) => {\n      await followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess)\n  }\n}\n\nexport default usersReducer;","import { createStore, combineReducers, applyMiddleware, compose, Action } from \"redux\";\nimport profileReducer from \"./profile-reducer\";\nimport  dialogReducer from \"./dialog-reducer\"\nimport usersReducer from \"./users-reducer\"\nimport authReducer from \"./auth-reducer\"\nimport thunk, {ThunkAction} from \"redux-thunk\";\nimport { ActionTypes, reducer as formReducer } from \"redux-form\"\nimport appReducer from \"./app-reducer\"\n\n\nlet rootReducer = combineReducers({\n    profilesPage: profileReducer,\n    dialogPage: dialogReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n    form: formReducer,\n    app: appReducer\n});\n\ntype RootReducerType = typeof rootReducer \nexport type AppStateType = ReturnType<RootReducerType>\n\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\n\n\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\n// @ts-ignore \nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, /* preloadedState, */ composeEnhancers(\n    applyMiddleware(thunk)\n  ))\n// @ts-ignore\nwindow._store_ = store\nexport default store","import React from \"react\";\n\n\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>){\n    \n    \n    return (props: WCP ) => {\n        return <React.Suspense fallback={<div>Loading...</div>}>\n                  <WrappedComponent {...props}/>\n               </React.Suspense>\n    }\n}","import {createSelector} from \"reselect\"\nimport { AppStateType } from \"./redux-store\";\n\nconst getUsersSelector = (state: AppStateType) => {\n    return state.usersPage.users;\n}\n\nexport const getUsers = createSelector(getUsersSelector,(users) => {\n    return users.filter(u => true);\n})\n\nexport const getPageSize = (state: AppStateType) => {\n    return state.usersPage.pageSize\n}\n\nexport const getTotalUsersCount = (state: AppStateType) => {\n    return state.usersPage.totalUsersCount\n}\n\nexport const getCurrentPage = (state: AppStateType) => {\n    return state.usersPage.currentPage\n}\n\nexport const getIsFetching = (state: AppStateType) => {\n    return state.usersPage.isFetching\n}\n\nexport const getFollowingInProgress = (state: AppStateType) => {\n    return state.usersPage.followingInProgress\n}\nexport const getUsersFilter = (state: AppStateType) => {\n    return state.usersPage.filter\n}\n\n","import React, {useState} from \"react\"\nimport styles from \"../Users/Paginator.module.css\"\nimport cn from \"classnames\";\n\ntype PropsType = {\n    totalUsersCount: number, \n    pageSize: number, \n    currentPage: number, \n    onPageChanged: (pageNumber: number) => void, \n    portionSize?: number\n}\n\n\nlet Paginator: React.FC<PropsType>= ({totalUsersCount,\n                                  pageSize,\n                                  currentPage, \n                                  onPageChanged, \n                                  portionSize = 10}) => {\n\n    let pagesCount = Math.ceil(totalUsersCount / pageSize);\n\n   let pages: Array<number> = [];\n   for (let i=1; i <= pagesCount; i++) {\n       pages.push(i);\n   }\n\n   let portionCount = Math.ceil(pagesCount / portionSize);\n   let [portionNumber, setPortionNumber] = useState(1);\n   let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\n   let rightPortionPageNumber = portionNumber * portionSize;\n\n   return <div className={styles.paginator}>\n   { portionNumber > 1 &&\n   <button onClick={() => { setPortionNumber(portionNumber - 1) }}>PREV</button> }\n\n       {pages\n           .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\n           .map((p) => {\n           return <span className={ cn({\n               [styles.selectedPage]: currentPage === p\n           }, styles.pageNumber) }\n                        key={p}\n                        onClick={(e) => {\n                            onPageChanged(p);\n                        }}>{p}</span>\n       })}\n\n   { portionCount > portionNumber &&\n       <button onClick={() => { setPortionNumber(portionNumber + 1) }}>NEXT</button> }\n</div>\n   }\n\nexport default Paginator","/*import {Formik, Form, Field} from \"formik\"\n\nimport React from \"react\"\nimport { useSelector } from \"react-redux\";\nimport { getUsersFilter } from \"../../Redux/users-selectors\";\n\nconst usersSearchFormValidate = (values: any) => {\n    const errors = {};\n    return errors;\n}\n\ntype FriendFormType = \"true\" | \"false\" | \"null\"\n\ntype FormType  = {\n  term: string \n  friend: FriendFormType\n}\n\ntype PropsType = {\n  onFilterChange: (filter: FilterType) => void\n}\n\n\nexport const UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\n    \n    const filter = useSelector(getUsersFilter)\n    \n    const submit = (values: FormType, { setSubmitting }: {setSubmitting: (isSubmitting: boolean) => void}) => {\n        const filter: FilterType = {\n          term: values.term,\n          friend: values.friend === \"null\" ? null : values.friend === \"true\" ? true : false\n        }\n      \n      props.onFilterChange(filter)\n          setSubmitting(false)\n      }\n\n    return <div>\n        <Formik\n       enableReinitialize\n       initialValues={{ term: filter.term, friend: String(filter.friend) as FriendFormType}}\n       validate={usersSearchFormValidate}\n       onSubmit={submit}\n     >\n       {({ isSubmitting }) => (\n         <Form>\n           <Field type=\"text\" name=\"term\" />\n                   <Field name=\"friend\" as=\"select\">\n                        <option value=\"null\">All</option>\n                        <option value=\"true\">Only followed</option>\n                        <option value=\"false\">Only unfollowed</option>\n                    </Field>\n           <button type=\"submit\" disabled={isSubmitting}>\n             Find\n           </button>\n         </Form>\n       )}\n     </Formik>\n    </div>\n})*/\n\n\nimport {Field, Form, Formik} from 'formik'\nimport React from 'react'\nimport { useSelector } from 'react-redux'\nimport {FilterType} from \"../../Redux/users-reducer\"\nimport { getUsersFilter } from '../../Redux/users-selectors'\n// @ts-ignore \nconst usersSearchFormValidate = (values: any) => {\n    const errors = {}\n    return errors\n}\n\ntype FriendFormType = 'true' | 'false' | 'null'\n\ntype FormType = {\n    term: string\n    friend: FriendFormType\n}\n\ntype PropsType = {\n    onFilterChanged: (filter: FilterType) => void\n}\n\nexport const UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\n\n    const filter = useSelector(getUsersFilter)\n\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\n        const filter: FilterType = {\n            term: values.term,\n            friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\n        }\n\n        props.onFilterChanged(filter)\n        setSubmitting(false)\n    }\n\n    return <div>\n        <Formik\n            enableReinitialize\n            initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\n            validate={usersSearchFormValidate}\n            onSubmit={submit}\n        >\n            {({isSubmitting}) => (\n                <Form>\n                    <Field type=\"text\" name=\"term\"/>\n\n                    <Field name=\"friend\" as=\"select\">\n                        <option value=\"null\">All</option>\n                        <option value=\"true\">Only followed</option>\n                        <option value=\"false\">Only unfollowed</option>\n                    </Field>\n                    <button type=\"submit\" disabled={isSubmitting}>\n                        Find\n                    </button>\n                </Form>\n            )}\n        </Formik>\n    </div>\n})\n","import React, {useEffect} from \"react\"\nimport styles from \"./users.module.css\"\nimport userPhoto from \"../../assets/images/user.png\"\nimport { NavLink, useHistory } from \"react-router-dom\";\nimport Paginator from \"./Paginator\";\nimport {UsersSearchForm} from \"./UsersSearchForm\"\nimport { FilterType, requestUsers  } from \"../../Redux/users-reducer\";\nimport { getCurrentPage, getFollowingInProgress, getPageSize, getTotalUsersCount, getUsers, getUsersFilter } from \"../../Redux/users-selectors\";\nimport {useDispatch, useSelector} from \"react-redux\"\nimport * as queryString from \"querystring\"\n\n\nexport const Users: React.FC = () => {\n\n    const users = useSelector(getUsers)\n    const totalUsersCount = useSelector(getTotalUsersCount)\n    const currentPage = useSelector(getCurrentPage)\n    const pageSize = useSelector(getPageSize)\n    const filter = useSelector(getUsersFilter)\n    const followingInProgress = useSelector(getFollowingInProgress)\n\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    useEffect(() => {\n        const parsed = queryString.parse(history.location.search.substr(1)) as {term: string; page: string; friend: string}\n         \n        let actualPage = currentPage\n        let actualFilter = filter\n\n        if (!!parsed.page) actualPage = Number(parsed.page)\n        if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\n\n        switch(parsed.friend) {\n            case \"null\":\n                actualFilter = {...actualFilter, friend: null}\n                break;\n            case \"true\":\n                actualFilter = {...actualFilter, friend: true}\n                break;\n            case \"false\":\n                actualFilter = {...actualFilter, friend: false}\n                break;\n        }\n\n        dispatch(requestUsers(actualPage, pageSize, actualFilter))\n    }, [])\n\n    useEffect(() => {\n        history.push({\n            pathname: \"/developers\",\n            search: `?term=${filter.term}&friend=${filter.friend}&page=${currentPage}`\n        })\n    }, [filter, currentPage])\n\n\n    const onPageChanged = (pageNumber: number) => {\n      dispatch(requestUsers(pageNumber, pageSize, filter));\n    } \n\n    const onFilterChange = (filter: FilterType) => {\n        dispatch(requestUsers(1, pageSize, filter))\n    }\n\n    const follow = (userId: number) => {\n       dispatch(follow(userId))\n    } \n\n    const unfollow = (userId: number) => {\n       dispatch(unfollow(userId))\n    }\n    \n    let pagesCount = Math.ceil(totalUsersCount / pageSize);\n\n   let pages = [];\n   for (let i=1; i <= pagesCount; i++) {\n       pages.push(i);\n   }\n\n    return(<div className={styles.usersItems}> \n    \n        <UsersSearchForm onFilterChanged={onFilterChange}/>\n        <Paginator currentPage={currentPage} onPageChanged={onPageChanged} totalUsersCount={totalUsersCount} pageSize={pageSize} /> \n       {\n         users.map( u => <div key={u.id}> \n               <span>\n                  <div>\n                    <NavLink to={\"/profile/\" + u.id }>\n                     <img src={ u.photos.small != null ? u.photos.small : userPhoto} className={styles.userPhoto} />\n                    </NavLink>\n                  </div>\n                  <div>\n                      { u.followed ? \n                      <button disabled={followingInProgress.some(id => id === u.id)} onClick={ () => { unfollow(u.id);}}>\n                          Unfollow</button> : \n                      <button disabled={followingInProgress.some(id => id === u.id)} onClick={ () => { follow(u.id);}}>\n                          Follow</button>}\n                  </div>\n               </span>\n               <span>\n                   <span>\n                       <div>{u.name}</div>\n                       <div>{u.status}</div>\n                   </span>\n                   <span>\n                     {/*<div>{\"u.city\"}</div>*/}\n                     {/*<div>{\"u.country\"}</div>*/}\n                   </span>\n               </span>\n\n           </div>)\n       }\n     </div>)\n}\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Preloader from \"../common/Preloader/Preloader\";\nimport {getIsFetching} from \"../../Redux/users-selectors\"\nimport { Users } from \"./Users\";\n\n\ntype UsersPagePropsType = {\n    pageTitle: string\n}\n\nexport const UsersPage: React.FC<UsersPagePropsType> = (props) => {\n\n     const isFetching = useSelector(getIsFetching)\n\n     return <>\n     <h2>{props.pageTitle}</h2>\n     {isFetching ? <Preloader /> : null}\n     <Users />\n            </>\n}\n\n","import { AppStateType } from \"./redux-store\"\n\nexport const selectIsAuth = (state: AppStateType) => {\n    return state.auth.isAuth\n}\n\nexport const selectCurrentUserLogin = (state: AppStateType) => {\n    return state.auth.login\n}","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport {UserOutlined} from \"@ant-design/icons\"\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectCurrentUserLogin, selectIsAuth } from \"../../Redux/auth-selector\";\nimport {logout} from \"../../Redux/auth-reducer\"\nimport {Avatar, Button, Col, Layout, Menu, Row} from 'antd'\n\n\nexport const AppHeader = (props) => {\n\n  const isAuth = useSelector(selectIsAuth)\n  const login = useSelector(selectCurrentUserLogin)\n\n  const dispatch = useDispatch()\n\n  const logoutCallback = () => {\n    dispatch(logout())\n  }\n\n  const { Header} = Layout;\n\n    return <Header className=\"header\">\n    <div className=\"logo\" />\n    <Row>\n        <Col span={18}>\n          <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\n             <Menu.Item key=\"1\"><NavLink to=\"/developers\">Developers</NavLink></Menu.Item>\n          </Menu>\n        </Col>\n        \n\n        {isAuth\n                ?<> <Col span={1}>\n                    <Avatar alt={login || ''} style={{backgroundColor: '#87d068'}} icon={<UserOutlined/>}/>\n                </Col>\n                    <Col span={5}>\n                        <Button onClick={logoutCallback}>Log out</Button>\n                    </Col>\n                </>\n                : <Col span={6}>\n                    <Button>\n                        <NavLink to={'/login'}>Login</NavLink>\n                    </Button>\n                </Col>}\n\n    </Row>\n  </Header>\n\n        /*<header className={s.header}>\n        <img src=\"https://api.logotip.online/uploads/5210b7a5f793493ba00d74a085830623.png\"></img>\n\n        <div className={s.loginBlock}>\n          { props.isAuth ? <div> {props.login} <div><button className={s.buttonLogout} onClick={props.logout}>Logout</button></div></div>\n         : <NavLink className={s.buttonLogin} to={\"/login\"}>Login</NavLink> }\n        </div>\n      </header>\n    )*/\n}\n\n","import React, { Component } from 'react'\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport Navbar from './components/Navbar/Navbar';\nimport {BrowserRouter, Route, Switch, withRouter, Redirect} from \"react-router-dom\";\nimport {Login} from './components/Login/Login';\nimport { connect } from \"react-redux\";\nimport {compose} from \"redux\"\nimport {initializeApp} from \"./Redux/app-reducer\"\nimport Preloader from './components/common/Preloader/Preloader';\nimport store, { AppStateType } from \"./Redux/redux-store\";\nimport {Provider} from \"react-redux\"\nimport { withSuspense } from './HOC/withSuspense';\nimport { UsersPage } from './components/Users/UsersContainer'\nimport { NavLink } from \"react-router-dom\"\nimport { Avatar, Row, Col } from 'antd';\n\n\nimport { Layout, Menu, Breadcrumb } from 'antd';\nimport { UserOutlined, LaptopOutlined, NotificationOutlined } from '@ant-design/icons';\nimport {AppHeader} from './components/Header/Header';\n\nconst { SubMenu } = Menu;\nconst { Header, Content, Footer, Sider } = Layout;\n\n\nconst DialogsContainer = React.lazy(() => import(\"./components/Dialogs/DialogsContainer\"))\nconst ProfileContainer = React.lazy(() => import(\"./components/Profile/ProfileContainer\"))\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n  initializeApp: () => void\n}\n\nconst SuspendedDialogs = withSuspense(DialogsContainer);\nconst SuspendedProfile = withSuspense(ProfileContainer);\n\nclass App extends Component<MapPropsType & DispatchPropsType> {\n  catchAllUnhandleErrors = (e: PromiseRejectionEvent) => {\n          alert(\"Some error occured\")\n          console.error(PromiseRejectionEvent)\n  }\n  componentDidMount() {\n    this.props.initializeApp();\n    window.addEventListener(\"unhandledrejection\", this.catchAllUnhandleErrors)\n }\n componentWillUnmount() {\n  window.addEventListener(\"unhandledrejection\", this.catchAllUnhandleErrors)\n }\n render(){\n   if (!this.props.initialized){\n   return <Preloader />\n   } else \n\n  return (\n    <Layout>\n    <AppHeader />\n    <Content style={{ padding: '0 50px' }}>\n      <Breadcrumb style={{ margin: '16px 0' }}>\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\n        <Breadcrumb.Item>List</Breadcrumb.Item>\n        <Breadcrumb.Item>App</Breadcrumb.Item>\n      </Breadcrumb>\n      <Layout className=\"site-layout-background\" style={{ padding: '24px 0' }}>\n        <Sider className=\"site-layout-background\" width={200}>\n          <Menu\n            mode=\"inline\"\n            //defaultSelectedKeys={['7']}\n           // defaultOpenKeys={['sub1']}\n            style={{ height: '100%' }}\n          >\n\n            <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"My Profile\">\n              <Menu.Item key=\"1\"><NavLink to=\"/profile\">Profile</NavLink></Menu.Item>\n              <Menu.Item key=\"2\"><NavLink to=\"/dialogs\">Messages</NavLink></Menu.Item>\n            </SubMenu>\n            <SubMenu key=\"sub2\" icon={<LaptopOutlined />} title=\"Developers\">\n              <Menu.Item key=\"5\"><NavLink to=\"/developers\">Users</NavLink></Menu.Item>\n              <Menu.Item key=\"6\">option6</Menu.Item>\n              <Menu.Item key=\"7\">option7</Menu.Item>\n              <Menu.Item key=\"8\">option8</Menu.Item>\n            </SubMenu>\n            <SubMenu key=\"sub3\" icon={<NotificationOutlined />} title=\"subnav 3\">\n              <Menu.Item key=\"9\">option9</Menu.Item>\n              <Menu.Item key=\"10\">option10</Menu.Item>\n              <Menu.Item key=\"11\">option11</Menu.Item>\n              <Menu.Item key=\"12\">option12</Menu.Item>\n            </SubMenu>\n          </Menu>\n        </Sider>\n        <Content style={{ padding: '0 24px', minHeight: 280 }}>\n <Switch>\n        \n        <Redirect exact from=\"/\" to=\"/Profile\"/> \n \n         <Route path=\"/dialogs\" \n               render={() => <SuspendedDialogs />}/>\n \n         <Route path=\"/profile/:userId?\" \n                render={() => <SuspendedProfile />}/>\n \n         <Route path=\"/developers\" render={ () => <UsersPage pageTitle={\"Пользователи\"} />}/>\n         \n         <Route path=\"/login\" render={ () => <Login />}/>\n          \n         <Route path=\"/mysocial-network\" render={ () => <Login />}/>\n \n         <Route path=\"*\" render={ () => <div>404 not found</div>}/>\n </Switch> \n        </Content>\n      </Layout>\n    </Content>\n    <Footer style={{ textAlign: 'center' }}>Social Network ©2021 Created by Ivan Staroverov</Footer>\n  </Layout>\n  /*  <div className=\"app-wrapper\">\n      <HeaderContainer />\n      <Navbar />\n      <div className=\"app-wrapper-content\">\n<Switch>\n        \n       <Redirect exact from=\"/\" to=\"/Profile\"/> \n\n        <Route path=\"/dialogs\" \n              render={() => <SuspendedDialogs />}/>\n\n        <Route path=\"/profile/:userId?\" \n               render={() => <SuspendedProfile />}/>\n\n        <Route path=\"/users\" render={ () => <UsersPage pageTitle={\"Пользователи\"} />}/>\n        \n        <Route path=\"/login\" render={ () => <Login />}/>\n         \n        <Route path=\"/mysocial-network\" render={ () => <Login />}/>\n\n        <Route path=\"*\" render={ () => <div>404 not found</div>}/>\n</Switch> \n      </div>\n    </div>*/\n  );\n }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n    initialized: state.app.initialized\n})\n\nlet AppContainer = compose<React.ComponentType>(\n  withRouter,\n  connect(mapStateToProps, {initializeApp})) (App);\n\nconst MainApp: React.FC = () => {\n  return <React.StrictMode>\n      <BrowserRouter>\n         <Provider store={store}>\n            <AppContainer />\n         </Provider>\n      </BrowserRouter>\n    </React.StrictMode>\n}\n\nexport default MainApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport MainApp from \"./App\"\n\n\n  \n  ReactDOM.render(\n    <React.StrictMode>\n      <MainApp />\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n\n\n\n\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3oI2W\",\"error\":\"FormsControls_error__9lcue\",\"formSummaryError\":\"FormsControls_formSummaryError__1F2-S\",\"form\":\"FormsControls_form__kEhdO\",\"form_button\":\"FormsControls_form_button__1Ywr9\",\"form_input\":\"FormsControls_form_input__3bn3b\"};","export type FieldValidatorsType = (value: string) => string | undefined\n\nexport const required: FieldValidatorsType = (value) => {\n    if (value) return undefined\n    return \"Field is required\"\n}\n\n\nexport const maxLengthCreator = (maxLength: number): FieldValidatorsType => (value) => {\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\n    return undefined\n}","import React from \"react\"\nimport classes from \"./FormsControls.module.css\"\n\n\n\nconst FormControl = ({input, meta, child, element, ...props}) => {\n    const hasError = meta.touched && meta.error;\n    return (\n        <div className={classes.formControl + \" \" + (hasError ? classes.error : \"\")}>\n            <div>\n                {props.children}\n            </div>\n           { hasError && <span>{meta.error}</span> }\n        </div>\n    )\n}\n\nexport const Textarea = (props) => {\n    const {input, meta, child, element, ...restProps} = props\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\n}\n\n\nexport const Input = (props) => {\n    const {input, meta, child, element, ...restProps} = props\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\n}"],"sourceRoot":""}